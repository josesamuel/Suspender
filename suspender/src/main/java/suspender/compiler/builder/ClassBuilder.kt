package suspender.compiler.builder

import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import javax.lang.model.element.Element
import javax.lang.model.element.TypeElement


/**
 */
internal class ClassBuilder(element: Element, bindingManager: BindingManager) : SuspenderBuilder(element, bindingManager) {

    companion object {
        const val PROXY_SUFFIX = "_SuspendWrapper"
    }

    private val proxyClassName = suspenderClassName + PROXY_SUFFIX


    /**
     * Returns the file spec to generate
     */
    fun generateSuspenderWrapper(): FileSpec {
        val fileSpecBuilder = FileSpec.builder(suspenderPackageName, proxyClassName)

        val proxyBuilder = TypeSpec.classBuilder(proxyClassName)
                .addKdoc("Wraps [$suspenderClassName] and exposes its method as suspend methods\n")
                .addKdoc("<p/>\n")
                .addKdoc("Override [getSuspenderWrapperDispatcher] to specify custom [CoroutineDispatcher]. \n")
                .addKdoc("@param instance An instance of [$suspenderClassName] to wrap \n\n")
                .addKdoc("<p/>\n")
                .addKdoc("Autogenerated by <a href=\"http://bit.ly/KtSuspender\">Suspender</a>\n")
                .addModifiers(KModifier.PUBLIC)
                .addModifiers(KModifier.OPEN)
                .primaryConstructor(FunSpec.constructorBuilder()
                        .addParameter(ParameterSpec.builder("instance",
                                suspenderElement.asKotlinType())
                                .addModifiers(KModifier.PRIVATE)
                                .build()).build())

                .addProperty(PropertySpec.builder("instance", suspenderElement.asKotlinType())
                        .addModifiers(KModifier.PRIVATE)
                        .initializer("instance")
                        .build())

        for (typeParameterElement in (suspenderElement as TypeElement).typeParameters) {
            proxyBuilder.addTypeVariable(TypeVariableName(typeParameterElement.toString()))
        }

        bindingManager.getFunctiondBuilder(suspenderElement).addWrapperMethods(proxyBuilder)

        fileSpecBuilder.addType(proxyBuilder.build())

        val extFun = FunSpec.builder("asSuspendable")
                .receiver(suspenderElement.asKotlinType())

        if (suspenderElement.typeParameters.isEmpty()) {
            extFun.returns(ClassName(suspenderPackageName, proxyClassName))
        } else {
            extFun.returns(ClassName(suspenderPackageName, proxyClassName).parameterizedBy(
                    suspenderElement.typeParameters.map {
                        it.asKotlinType()
                    }
            ))
        }

        extFun.addStatement("return %T(this)", ClassName(suspenderPackageName, proxyClassName))

        for (typeParameterElement in (suspenderElement as TypeElement).typeParameters) {
            extFun.addTypeVariable(TypeVariableName(typeParameterElement.toString()))
        }

        fileSpecBuilder.addFunction(extFun.build())
        return fileSpecBuilder.build()
    }

}